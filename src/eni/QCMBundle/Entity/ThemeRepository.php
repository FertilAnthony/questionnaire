<?php

namespace eni\QCMBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ThemeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ThemeRepository extends EntityRepository
{
    protected $validator;

    
    public function getRandomQuestionIdsByTheme($nbQuestions, $theme) {
        
        $nbQuestionsByTheme = $theme->getQuestions()->count();

        // Récupération des ids
        $ids = [];
        foreach($theme->getQuestions() as $question) {
            $ids[] = $question->getId();
        }
        //compte et tri les ids
        $nbIds = count($ids);
        sort($ids);

        $idUsed = [];
        if ($nbIds >= $nbQuestions) {
            $idUsed = $ids;
        } else {
            for ($i = 0; $i < $nbQuestions; $i++) {
                $randomId = rand($ids[0], $ids[$nbIds-1]);
                while (in_array($randomId, $idUsed)) {
                    $randomId = rand($ids[0], $ids[$nbIds-1]);
                }
                $idUsed[] = $randomId;
            }
        }

        return $idUsed;
    }

    /**
     * @param mixed $validator
     */
    public function setValidator(\Symfony\Component\Validator\Validator $validator)
    {
        $this->validator = $validator;
    }

    /**
     * @return mixed
     */
    public function getValidator()
    {
        if(is_null($this->validator)){
            $ValidatorBuilder = Validation::createValidatorBuilder();
            $ValidatorBuilder->enableAnnotationMapping();
            $this->validator = $ValidatorBuilder->getValidator();
        }
        return $this->validator;
    }

    public function add(Theme $theme){
        $errorsFields = $this->getValidator()->validate($theme);
        if (count($errorsFields) > 0) {
            throw new ExceptionValidation($errorsFields);
        }

        $this->getEntityManager()->persist($theme);
        $this->getEntityManager()->flush();
        return $theme;
    }
}
